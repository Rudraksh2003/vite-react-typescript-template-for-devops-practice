name: Deploy to EKS via EC2

on:
  push:
    branches:
      - main

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    
    env:
      REPO: 'https://github.com/Rudraksh2003/vite-react-typescript-template-for-devops-practice'
      DOCKER_NAME: 'rudrakshladdha/react'
      DOCKER_REGISTRY: 'https://index.docker.io/v1/'
      CLUSTER_NAME: 'aa'
      REGION: 'ap-south-1'

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 3: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 4: Build Docker image
      - name: Build Docker image
        run: docker build -t ${{ env.DOCKER_NAME }} .

      # Step 5: Push Docker image to Docker Hub
      - name: Push Docker image to Docker Hub
        run: docker push ${{ env.DOCKER_NAME }}

      # Step 6: Set up AWS CLI and EKS configuration
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.REGION }}

      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --region ${{ env.REGION }} --name ${{ env.CLUSTER_NAME }}

      # Step 7: Deploy to EKS
      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f k8s-deployment.yaml
          kubectl apply -f k8s-service.yaml

      # Step 8: SSH into EC2 instance and set up proxy
      - name: Connect to AWS EC2
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ec2-user
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          port: 22

      - name: Set up NGINX as reverse proxy on EC2
        run: |
          ssh -i ${{ secrets.EC2_PRIVATE_KEY }} ec2-user@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
          sudo amazon-linux-extras install nginx1
          sudo systemctl start nginx
          
          # Configure NGINX to proxy to the EKS service
          sudo tee /etc/nginx/conf.d/reverse-proxy.conf <<EOL
          server {
              listen 80;
              server_name _;

              location / {
                  proxy_pass http://<eks-service-url>:<service-port>;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }
          }
          EOL
          
          sudo nginx -s reload
          EOF
